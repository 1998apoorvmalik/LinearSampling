#!/usr/bin/env python2

import gflags as flags
import subprocess
import sys
import os

FLAGS = flags.FLAGS

def setgflags():
    flags.DEFINE_integer('beam', 100, "set beam size, (DEFAULT=100)", short_name='b')
    flags.DEFINE_boolean('sharpturn', False, "enable sharp turn in prediction, (DEFAULT=FALSE)")
    flags.DEFINE_boolean('verbose', False, "print out energy of each loop in the structure, (DEFAULT=FALSE)")
    flags.DEFINE_integer('sample_number', 10, "sample number, (DEFAULT=10)", short_name='k') 
    flags.DEFINE_boolean('read_forest', False, "read forest from STDIN (DEFAULT=FALSE)", short_name="f")
    flags.DEFINE_boolean('non_saving', False, "non_saving (non): do not save any hyperedges during sampling, i.e., like RNAsubopt -p 1000; \
                                                (DEFAULT=False)")
    # flags.DEFINE_boolean('no_saving', False, "do not save any hyperedges during sampling, i.e., like RNAsubopt -p 1000 (DEFAULT=FALSE)")
    argv = FLAGS(sys.argv)

def main():
    beamsize = str(FLAGS.beam)
    is_sharpturn = '1' if FLAGS.sharpturn else '0'
    is_verbose = '1' if FLAGS.verbose else '0'
    sample_number = str(FLAGS.sample_number)
    read_forest = '1' if FLAGS.read_forest else '0' 

    path = os.path.dirname(os.path.abspath(__file__))
    if int(beamsize) <= 0:
        cmd = ["%s/%s" % (path, ('bin/exact_linearsampling_lazysaving' if not FLAGS.non_saving else 'bin/exact_linearsampling_nonsaving')), beamsize, is_sharpturn, is_verbose, sample_number, read_forest] #saving_option
    else:
        cmd = ["%s/%s" % (path, ('bin/linearsampling_lazysaving' if not FLAGS.non_saving else 'bin/linearsampling_nonsaving')), beamsize, is_sharpturn, is_verbose, sample_number, read_forest] #saving_option
    subprocess.call(cmd, stdin=sys.stdin)
    
if __name__ == '__main__':
    setgflags()
    main()
